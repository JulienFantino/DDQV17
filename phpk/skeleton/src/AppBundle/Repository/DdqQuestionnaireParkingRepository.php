<?php

namespace AppBundle\Repository;

use CNAMTS\PHPK\CoreBundle\Data\Repository;

/**
 * DdqQuestionnaireParkingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DdqQuestionnaireParkingRepository extends \Doctrine\ORM\EntityRepository implements Repository
{
    public function liste()
    {
        $qb = $this->createQueryBuilder('a');
        return $qb;
    }

    public function findOneByAgentByCampagne($agent, $campagne)
    {
        $query = $this->_em->createQuery(
            'SELECT q FROM AppBundle:DdqQuestionnaireParking q '
            . 'JOIN q.idDdqCampagne c '
            . 'WHERE c.libelle = :campagne '
            . 'AND q.idAgent = :idAgent');
        $query->setParameter('campagne', $campagne);
        $query->setParameter('idAgent', $agent);
        return $query->getSingleResult();
    }

    public function findByMesCampagnes(array $parameters)
    {
        $query = $this->_em->createQuery(
            'SELECT q FROM AppBundle:DdqQuestionnaireParking q '
            . 'JOIN q.idDdqCampagne c '
            . 'WHERE c.statut = \'nouvelle\' '
            . 'AND q.idAgent = :idAgent');
        $query->setParameter('idAgent', $parameters[0]);
        return $query->getResult();
    }

    public function findByMesCampagnesTerminees(array $parameters)
    {
        $query = $this->_em->createQuery(
            'SELECT q FROM AppBundle:DdqQuestionnaireParking q '
            . 'JOIN q.idDdqCampagne c '
            . 'WHERE c.statut = \'terminée\' '
            . 'AND q.idAgent = :idAgent');
        $query->setParameter('idAgent', $parameters[0]);
        return $query->getResult();
    }

    public function findByQuestionnairesRemplis()
    {
        $query = $this->_em->createQuery(
            'SELECT q FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.statut = \'modifiable\'');
        return $query->getResult();
    }

    public function countByNbTotal($idCampagne)
    {
        $query = $this->_em->createQuery(
            'SELECT COUNT(q) FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :idCampagne');
        $query->setParameter('idCampagne', $idCampagne);
        return $query->getSingleScalarResult();
    }

    public function countByValid($idCampagne)
    {
        $query = $this->_em->createQuery(
            'SELECT COUNT(q) FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :idCampagne '
            . 'AND q.statut = \'validé\'');
        $query->setParameter('idCampagne', $idCampagne);
        return $query->getSingleScalarResult();
    }

    public function countByInvalid($idCampagne)
    {
        $query = $this->_em->createQuery(
            'SELECT COUNT(q) FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :idCampagne '
            . 'AND q.statut = \'invalidé\'');
        $query->setParameter('idCampagne', $idCampagne);
        return $query->getSingleScalarResult();
    }

    public function countByNbEnfants($idCampagne)
    {
        $query = $this->_em->createQuery(
            'SELECT COUNT(q) FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :idCampagne '
            . 'AND q.enfants = true');
        $query->setParameter('idCampagne', $idCampagne);
        return $query->getSingleScalarResult();
    }

    public function countByNbHandicap($idCampagne)
    {
        $query = $this->_em->createQuery(
            'SELECT COUNT(q) FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :idCampagne '
            . 'AND q.handicap = true');
        $query->setParameter('idCampagne', $idCampagne);
        return $query->getSingleScalarResult();
    }

    public function countByNbEmploi($idCampagne)
    {
        $query = $this->_em->createQuery(
            'SELECT COUNT(q) FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :idCampagne '
            . 'AND q.emploi = true');
        $query->setParameter('idCampagne', $idCampagne);
        return $query->getSingleScalarResult();
    }

    public function findByCampagnesUtilisateur($idCampagne)
    {
        $sql = 'SELECT agent.Nomium AS nomium ORDER BYagent.Nomium ';
        $idCampagne = 43;
        $query = $this->_em->createQuery(
            'SELECT q  FROM AppBundle:DdqQuestionnaireParking q '
            . 'WHERE q.idDdqCampagne = :campagne '
            . 'AND q.statut = \'modifiable\' '
            . 'ORDER BY q.datenaissance1 DESC '
        )->setParameter('campagne', $idCampagne);
        return $query->getResult();
    }

    public function findByCampagnesUtilisateurQueryBuilder($idCampagne)
    {

        $query = $this->createQueryBuilder('q')
            ->where('q.idDdqCampagne = :campagne and q.statut <> \'nouveau\'')
            // ->where('q.statut = \'modifiable\' ')
            ->orderBy('q.datenaissance1', 'DESC')->setParameter('campagne', $idCampagne);

        return $query;
    }

    public function findByParkingUtilisateurQueryBuilder($idCampagne)
    {

        $query = $this->createQueryBuilder('q')
            ->where('q.idDdqCampagne = :campagne and q.statut = \'validé\'')
            // ->where('q.statut = \'modifiable\' ')
            ->orderBy('q.datenaissance1', 'DESC')->setParameter('campagne', $idCampagne);

        return $query;
    }

}
